// <auto-generated/>
using GProtobuf.Core;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Model.Serialization
{
    public static class Deserializers
    {
        public static global::Model.SimpleTypes DeserializeSimpleTypes(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadSimpleTypes(ref reader);
        }

        public static global::Model.A DeserializeA(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadA(ref reader);
        }

        public static global::Model.B DeserializeB(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadB(ref reader);
        }

        public static global::Model.C DeserializeC(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadC(ref reader);
        }

        public static global::Model.A1 DeserializeA1(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadA1(ref reader);
        }

        public static global::Model.B1 DeserializeB1(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadB1(ref reader);
        }

        public static global::Model.C1 DeserializeC1(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadC1(ref reader);
        }

        public static global::Model.ModelClassBase DeserializeModelClassBase(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadModelClassBase(ref reader);
        }

        public static global::Model.ModelClass DeserializeModelClass(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadModelClass(ref reader);
        }

        public static global::Model.SecondModelClass DeserializeSecondModelClass(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadSecondModelClass(ref reader);
        }

        public static global::Model.ClassWithCollections DeserializeClassWithCollections(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders.ReadClassWithCollections(ref reader);
        }

    }

    public static class Serializers
    {
        public static void SerializeSimpleTypes(Stream stream, global::Model.SimpleTypes obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteSimpleTypes(writer, obj);
        }

        public static void SerializeA(Stream stream, global::Model.A obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteA(writer, obj);
        }

        public static void SerializeB(Stream stream, global::Model.B obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteB(writer, obj);
        }

        public static void SerializeC(Stream stream, global::Model.C obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteC(writer, obj);
        }

        public static void SerializeA1(Stream stream, global::Model.A1 obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteA1(writer, obj);
        }

        public static void SerializeB1(Stream stream, global::Model.B1 obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteB1(writer, obj);
        }

        public static void SerializeC1(Stream stream, global::Model.C1 obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteC1(writer, obj);
        }

        public static void SerializeModelClassBase(Stream stream, global::Model.ModelClassBase obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteModelClassBase(writer, obj);
        }

        public static void SerializeModelClass(Stream stream, global::Model.ModelClass obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteModelClass(writer, obj);
        }

        public static void SerializeSecondModelClass(Stream stream, global::Model.SecondModelClass obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteSecondModelClass(writer, obj);
        }

        public static void SerializeClassWithCollections(Stream stream, global::Model.ClassWithCollections obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream);
            StreamWriters.WriteClassWithCollections(writer, obj);
        }

    }

    public static class SpanReaders
    {
        public static global::Model.SimpleTypes ReadSimpleTypes(ref SpanReader reader)
        {
            return ReadSimpleTypesContent(ref reader);
        }

        public static global::Model.A ReadA(ref SpanReader reader)
        {
            global::Model.A result = default(global::Model.A);

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 5)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadBContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (result == null)
                {
                    result = new global::Model.A();
                }

                if (fieldId == 1)
                {
                    result.StringA = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.B ReadB(ref SpanReader reader)
        {
            global::Model.B result = default(global::Model.B);

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 10)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadCContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (fieldId == 5)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadBContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (result == null)
                {
                    throw new InvalidOperationException($"ProtoInclude field must be first for ProtoInclude type Model.B. Is {fieldId} defined in ProtoInclude attributes?");
                }

                if (fieldId == 1)
                {
                    result.StringA = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.C ReadC(ref SpanReader reader)
        {
            global::Model.C result = default(global::Model.C);

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 5)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadBContent(ref reader1);
                    if (contentResult is global::Model.C castResult)
                    {
                        result = castResult;
                        continue;
                    }
                    throw new InvalidOperationException($"Expected type Model.C but got {contentResult?.GetType().Name ?? "null"}");
                }

                if (fieldId == 10)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadCContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (result == null)
                {
                    throw new InvalidOperationException($"ProtoInclude field must be first for ProtoInclude type Model.C. Is {fieldId} defined in ProtoInclude attributes?");
                }

                if (fieldId == 1)
                {
                    result.StringA = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.A1 ReadA1(ref SpanReader reader)
        {
            return ReadA1Content(ref reader);
        }

        public static global::Model.B1 ReadB1(ref SpanReader reader)
        {
            return ReadB1Content(ref reader);
        }

        public static global::Model.C1 ReadC1(ref SpanReader reader)
        {
            return ReadC1Content(ref reader);
        }

        public static global::Model.ModelClassBase ReadModelClassBase(ref SpanReader reader)
        {
            global::Model.ModelClassBase result = default(global::Model.ModelClassBase);

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadModelClassContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (fieldId == 2)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadSecondModelClassContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (result == null)
                {
                    throw new InvalidOperationException($"ProtoInclude field must be first for abstract type Model.ModelClassBase. Is {fieldId} defined in ProtoInclude attributes?");
                }

                if (fieldId == 3122)
                {
                    result.A = reader.ReadDouble(wireType);
                    continue;
                }

                if (fieldId == 201)
                {
                    result.B = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 1234568)
                {
                    result.Str = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.ModelClass ReadModelClass(ref SpanReader reader)
        {
            global::Model.ModelClass result = default(global::Model.ModelClass);

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadModelClassContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (result == null)
                {
                    throw new InvalidOperationException($"ProtoInclude field must be first for ProtoInclude type Model.ModelClass. Is {fieldId} defined in ProtoInclude attributes?");
                }

                if (fieldId == 3122)
                {
                    result.A = reader.ReadDouble(wireType);
                    continue;
                }

                if (fieldId == 201)
                {
                    result.B = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 1234568)
                {
                    result.Str = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.SecondModelClass ReadSecondModelClass(ref SpanReader reader)
        {
            global::Model.SecondModelClass result = default(global::Model.SecondModelClass);

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 2)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    var contentResult = ReadSecondModelClassContent(ref reader1);
                    result = contentResult;
                    continue;
                }

                if (result == null)
                {
                    throw new InvalidOperationException($"ProtoInclude field must be first for ProtoInclude type Model.SecondModelClass. Is {fieldId} defined in ProtoInclude attributes?");
                }

                if (fieldId == 3122)
                {
                    result.A = reader.ReadDouble(wireType);
                    continue;
                }

                if (fieldId == 201)
                {
                    result.B = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 1234568)
                {
                    result.Str = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.ClassWithCollections ReadClassWithCollections(ref SpanReader reader)
        {
            return ReadClassWithCollectionsContent(ref reader);
        }


        public static global::Model.SimpleTypes ReadSimpleTypesContent(ref SpanReader reader)
        {
            global::Model.SimpleTypes result = new global::Model.SimpleTypes();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    // Read BCL Guid format (2 fixed64 fields)
                    ulong low = 0, high = 0;
                    while (!reader1.IsEnd)
                    {
                        var fieldInfo = reader1.ReadWireTypeAndFieldId();
                        switch (fieldInfo.fieldId)
                        {
                            case 1: low = reader1.ReadFixed64(); break;
                            case 2: high = reader1.ReadFixed64(); break;
                            default: reader1.SkipField(fieldInfo.wireType); break;
                        }
                    }
                    // Convert back to Guid
                    var guidBytes = new byte[16];
                    System.BitConverter.GetBytes(low).CopyTo(guidBytes, 0);
                    System.BitConverter.GetBytes(high).CopyTo(guidBytes, 8);
                    result.GuidValue = new Guid(guidBytes);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.A ReadAContent(ref SpanReader reader)
        {
            global::Model.A result = new global::Model.A();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 5)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result = ReadBContent(ref reader1);
                    continue;
                }

                if (fieldId == 1)
                {
                    result.StringA = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.B ReadBContent(ref SpanReader reader)
        {
            global::Model.B result = new global::Model.B();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 10)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result = ReadCContent(ref reader1);
                    continue;
                }

                if (fieldId == 1)
                {
                    result.StringB = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.C ReadCContent(ref SpanReader reader)
        {
            global::Model.C result = new global::Model.C();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.StringC = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.A1 ReadA1Content(ref SpanReader reader)
        {
            global::Model.A1 result = new global::Model.A1();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 5)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.B1 = global::Model.Serialization.SpanReaders.ReadB1(ref reader1);
                    continue;
                }

                if (fieldId == 1)
                {
                    result.StringA = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.B1 ReadB1Content(ref SpanReader reader)
        {
            global::Model.B1 result = new global::Model.B1();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 10)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.C1 = global::Model.Serialization.SpanReaders.ReadC1(ref reader1);
                    continue;
                }

                if (fieldId == 1)
                {
                    result.StringB = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.C1 ReadC1Content(ref SpanReader reader)
        {
            global::Model.C1 result = new global::Model.C1();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.StringC = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.ModelClassBase ReadModelClassBaseContent(ref SpanReader reader)
        {
            global::Model.ModelClassBase result = default(global::Model.ModelClassBase);

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result = ReadModelClassContent(ref reader1);
                    continue;
                }

                if (fieldId == 2)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result = ReadSecondModelClassContent(ref reader1);
                    continue;
                }

                if (result == null)
                {
                    throw new InvalidOperationException($"ProtoInclude field must be first for abstract type Model.ModelClassBase. Is {fieldId} defined in ProtoInclude attributes?");
                }

                if (fieldId == 3122)
                {
                    result.A = reader.ReadDouble(wireType);
                    continue;
                }

                if (fieldId == 201)
                {
                    result.B = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 1234568)
                {
                    result.Str = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.ModelClass ReadModelClassContent(ref SpanReader reader)
        {
            global::Model.ModelClass result = new global::Model.ModelClass();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.D = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 2)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.Model2 = global::Model.Serialization.SpanReaders.ReadClassWithCollections(ref reader1);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.SecondModelClass ReadSecondModelClassContent(ref SpanReader reader)
        {
            global::Model.SecondModelClass result = new global::Model.SecondModelClass();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::Model.ClassWithCollections ReadClassWithCollectionsContent(ref SpanReader reader)
        {
            global::Model.ClassWithCollections result = new global::Model.ClassWithCollections();

            while(!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.SomeInt = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 6)
                {
                    result.Bytes = reader.ReadByteArray();
                    continue;
                }

                if (fieldId == 7)
                {
                    result.PackedInts = reader.ReadPackedVarIntInt32Array(false);
                    continue;
                }

                if (fieldId == 8)
                {
                    result.PackedFixedSizeInts = reader.ReadPackedFixedSizeInt32Array();
                    continue;
                }

                if (fieldId == 9)
                {
                    List<int> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;

                    while (!reader.IsEnd)
                    {
                        var number = reader.ReadVarInt32();
                        var p = reader.Position;
                        resultList.Add(number);
                        (wireType1, fieldId1) = reader.ReadWireTypeAndFieldId();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }

                    result.NonPackedInts = resultList.ToArray();
                    continue;
                }

                if (fieldId == 10)
                {
                    List<int> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;

                    while (!reader.IsEnd)
                    {
                        var number = reader.ReadFixedInt32();
                        var p = reader.Position;
                        resultList.Add(number);
                        (wireType1, fieldId1) = reader.ReadWireTypeAndFieldId();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }

                    result.NonPackedFixedSizeInts = resultList.ToArray();
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

    }

    public static class StreamWriters
    {
        public static void WriteSimpleTypes(global::GProtobuf.Core.StreamWriter writer, global::Model.SimpleTypes instance)
        {
            if (instance.GuidValue != Guid.Empty)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32(18u); // BCL Guid format: 2 fixed64 fields = 2*(1+8) = 18 bytes
                // Convert Guid to BCL format (2 fixed64 fields)
                var guidBytes = instance.GuidValue.ToByteArray();
                var low = System.BitConverter.ToUInt64(guidBytes, 0);
                var high = System.BitConverter.ToUInt64(guidBytes, 8);
                // Field 1: low (fixed64)
                writer.WriteTag(1, WireType.Fixed64b);
                writer.WriteFixed64(low);
                // Field 2: high (fixed64)
                writer.WriteTag(2, WireType.Fixed64b);
                writer.WriteFixed64(high);
            }

        }

        public static void WriteA(global::GProtobuf.Core.StreamWriter writer, global::Model.A instance)
        {

            switch (instance)
            {
                case global::Model.B obj1:
                    var calculator5_B = new global::GProtobuf.Core.WriteSizeCalculator();
                    if (obj1 is global::Model.C objC10)
                    {
                        calculator5_B.WriteTag(10, WireType.Len);
                        var tempCalcC10 = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateCContentSize(ref tempCalcC10, objC10);
                        calculator5_B.WriteVarUInt32((uint)tempCalcC10.Length);
                        calculator5_B.WriteRawBytes(new byte[tempCalcC10.Length]);
                    }
                    SizeCalculators.CalculateBContentSize(ref calculator5_B, obj1);
                    writer.WriteTag(5, WireType.Len);
                    writer.WriteVarUInt32((uint)calculator5_B.Length);
                    // Write B wrapper content inline
                    switch (obj1)
                    {
                        case global::Model.C objC:
                            writer.WriteTag(10, WireType.Len);
                            var calculatorC = new global::GProtobuf.Core.WriteSizeCalculator();
                            SizeCalculators.CalculateCContentSize(ref calculatorC, objC);
                            writer.WriteVarUInt32((uint)calculatorC.Length);
                            if (objC.StringC != null)
                            {
                                writer.WriteTag(1, WireType.Len);
                                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(objC.StringC));
                                writer.WriteString(objC.StringC);
                            }

                            break;
                    }
                    if (obj1.StringB != null)
                    {
                        writer.WriteTag(1, WireType.Len);
                        writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(obj1.StringB));
                        writer.WriteString(obj1.StringB);
                    }

                    break;
            }
            if (instance.StringA != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringA));
                writer.WriteString(instance.StringA);
            }

        }

        public static void WriteB(global::GProtobuf.Core.StreamWriter writer, global::Model.B instance)
        {

            writer.WriteTag(5, WireType.Len);
            var calculatorContent = new global::GProtobuf.Core.WriteSizeCalculator();
            SizeCalculators.CalculateBContentSize(ref calculatorContent, instance);
            writer.WriteVarUInt32((uint)calculatorContent.Length);
            if (instance.StringB != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringB));
                writer.WriteString(instance.StringB);
            }

            if (instance.StringA != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringA));
                writer.WriteString(instance.StringA);
            }

        }

        public static void WriteC(global::GProtobuf.Core.StreamWriter writer, global::Model.C instance)
        {

            writer.WriteTag(5, WireType.Len);
            var calculator5 = new global::GProtobuf.Core.WriteSizeCalculator();
            calculator5.WriteTag(10, WireType.Len);
            var tempCalculatorC = new global::GProtobuf.Core.WriteSizeCalculator();
            SizeCalculators.CalculateCContentSize(ref tempCalculatorC, instance);
            calculator5.WriteVarUInt32((uint)tempCalculatorC.Length);
            calculator5.WriteRawBytes(new byte[tempCalculatorC.Length]);
            SizeCalculators.CalculateBContentSize(ref calculator5, instance);
            writer.WriteVarUInt32((uint)calculator5.Length);
            writer.WriteTag(10, WireType.Len);
            var calculatorC = new global::GProtobuf.Core.WriteSizeCalculator();
            SizeCalculators.CalculateCContentSize(ref calculatorC, instance);
            writer.WriteVarUInt32((uint)calculatorC.Length);
            if (instance.StringC != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringC));
                writer.WriteString(instance.StringC);
            }

            if (instance.StringB != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringB));
                writer.WriteString(instance.StringB);
            }

            if (instance.StringA != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringA));
                writer.WriteString(instance.StringA);
            }

        }

        public static void WriteA1(global::GProtobuf.Core.StreamWriter writer, global::Model.A1 instance)
        {
            if (instance.B1 != null)
            {
                var calculator5 = new global::GProtobuf.Core.WriteSizeCalculator();
                SizeCalculators.CalculateB1Size(ref calculator5, instance.B1);
                writer.WriteTag(5, WireType.Len);
                writer.WriteVarUInt32((uint)calculator5.Length);
                StreamWriters.WriteB1(writer, instance.B1);
            }

            if (instance.StringA != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringA));
                writer.WriteString(instance.StringA);
            }

        }

        public static void WriteB1(global::GProtobuf.Core.StreamWriter writer, global::Model.B1 instance)
        {
            if (instance.C1 != null)
            {
                var calculator10 = new global::GProtobuf.Core.WriteSizeCalculator();
                SizeCalculators.CalculateC1Size(ref calculator10, instance.C1);
                writer.WriteTag(10, WireType.Len);
                writer.WriteVarUInt32((uint)calculator10.Length);
                StreamWriters.WriteC1(writer, instance.C1);
            }

            if (instance.StringB != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringB));
                writer.WriteString(instance.StringB);
            }

        }

        public static void WriteC1(global::GProtobuf.Core.StreamWriter writer, global::Model.C1 instance)
        {
            if (instance.StringC != null)
            {
                writer.WriteTag(1, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringC));
                writer.WriteString(instance.StringC);
            }

        }

        public static void WriteModelClassBase(global::GProtobuf.Core.StreamWriter writer, global::Model.ModelClassBase instance)
        {

            switch (instance)
            {
                case global::Model.ModelClass obj1:
                    var calculator1_ModelClass = new global::GProtobuf.Core.WriteSizeCalculator();
                    SizeCalculators.CalculateModelClassContentSize(ref calculator1_ModelClass, obj1);
                    writer.WriteTag(1, WireType.Len);
                    writer.WriteVarUInt32((uint)calculator1_ModelClass.Length);
                    // Write B wrapper content inline
                    switch (obj1)
                    {
                    }
                    if (obj1.D != 0)
                    {
                        writer.WriteTag(1, WireType.VarInt);
                        writer.WriteVarint32(obj1.D);
                    }

                    if (obj1.Model2 != null)
                    {
                        var calculator2 = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateClassWithCollectionsSize(ref calculator2, obj1.Model2);
                        writer.WriteTag(2, WireType.Len);
                        writer.WriteVarUInt32((uint)calculator2.Length);
                        StreamWriters.WriteClassWithCollections(writer, obj1.Model2);
                    }

                    break;
                case global::Model.SecondModelClass obj1:
                    var calculator2_SecondModelClass = new global::GProtobuf.Core.WriteSizeCalculator();
                    SizeCalculators.CalculateSecondModelClassContentSize(ref calculator2_SecondModelClass, obj1);
                    writer.WriteTag(2, WireType.Len);
                    writer.WriteVarUInt32((uint)calculator2_SecondModelClass.Length);
                    // Write B wrapper content inline
                    switch (obj1)
                    {
                    }
                    break;
            }
            writer.WriteTag(3122, WireType.Fixed64b);
            writer.WriteDouble(instance.A);

            if (instance.B != 0)
            {
                writer.WriteTag(201, WireType.VarInt);
                writer.WriteVarint32(instance.B);
            }

            if (instance.Str != null)
            {
                writer.WriteTag(1234568, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.Str));
                writer.WriteString(instance.Str);
            }

        }

        public static void WriteModelClass(global::GProtobuf.Core.StreamWriter writer, global::Model.ModelClass instance)
        {

            writer.WriteTag(1, WireType.Len);
            var calculatorContent = new global::GProtobuf.Core.WriteSizeCalculator();
            SizeCalculators.CalculateModelClassContentSize(ref calculatorContent, instance);
            writer.WriteVarUInt32((uint)calculatorContent.Length);
            if (instance.D != 0)
            {
                writer.WriteTag(1, WireType.VarInt);
                writer.WriteVarint32(instance.D);
            }

            if (instance.Model2 != null)
            {
                var calculator2 = new global::GProtobuf.Core.WriteSizeCalculator();
                SizeCalculators.CalculateClassWithCollectionsSize(ref calculator2, instance.Model2);
                writer.WriteTag(2, WireType.Len);
                writer.WriteVarUInt32((uint)calculator2.Length);
                StreamWriters.WriteClassWithCollections(writer, instance.Model2);
            }

            writer.WriteTag(3122, WireType.Fixed64b);
            writer.WriteDouble(instance.A);

            if (instance.B != 0)
            {
                writer.WriteTag(201, WireType.VarInt);
                writer.WriteVarint32(instance.B);
            }

            if (instance.Str != null)
            {
                writer.WriteTag(1234568, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.Str));
                writer.WriteString(instance.Str);
            }

        }

        public static void WriteSecondModelClass(global::GProtobuf.Core.StreamWriter writer, global::Model.SecondModelClass instance)
        {

            writer.WriteTag(2, WireType.Len);
            writer.WriteVarint32(0); // No fields inside final ProtoInclude
            writer.WriteTag(3122, WireType.Fixed64b);
            writer.WriteDouble(instance.A);

            if (instance.B != 0)
            {
                writer.WriteTag(201, WireType.VarInt);
                writer.WriteVarint32(instance.B);
            }

            if (instance.Str != null)
            {
                writer.WriteTag(1234568, WireType.Len);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.Str));
                writer.WriteString(instance.Str);
            }

        }

        public static void WriteClassWithCollections(global::GProtobuf.Core.StreamWriter writer, global::Model.ClassWithCollections instance)
        {
            if (instance.SomeInt != 0)
            {
                writer.WriteTag(1, WireType.VarInt);
                writer.WriteVarint32(instance.SomeInt);
            }

            if (instance.Bytes != null)
            {
                writer.WriteTag(6, WireType.Len);
                writer.WriteVarUInt32((uint)instance.Bytes.Length);
                writer.Stream.Write(instance.Bytes);
            }

            if (instance.PackedInts != null)
            {
                writer.WriteTag(7, WireType.Len);
                var packedSize = Utils.GetVarintPackedCollectionSize(instance.PackedInts);
                writer.WriteVarUInt32((uint)packedSize);
                foreach(var v in instance.PackedInts) writer.WriteVarint32(v);
            }

            if (instance.PackedFixedSizeInts != null)
            {
                writer.WriteTag(8, WireType.Len);
                writer.WriteVarUInt32((uint)(instance.PackedFixedSizeInts.Length << 2));
                writer.WritePackedFixedSizeIntArray(instance.PackedFixedSizeInts);
            }

            if (instance.NonPackedInts != null)
            {
                var tagAndWire = Utils.GetTagAndWireType(9, WireType.VarInt);
                foreach(var v in instance.NonPackedInts) { writer.WriteVarint32(tagAndWire); writer.WriteVarint32(v); }
            }

            if (instance.NonPackedFixedSizeInts != null)
            {
                var tagAndWire = Utils.GetTagAndWireType(10, WireType.Fixed32b);
                foreach(var v in instance.NonPackedFixedSizeInts) { writer.WriteVarint32(tagAndWire); writer.WriteFixedSizeInt32(v); }
            }

        }


        public static void WriteGuid(global::GProtobuf.Core.StreamWriter writer, Guid value)
        {
            writer.WriteGuid(value);
        }
    }

    public static class SizeCalculators
    {
        public static void CalculateSimpleTypesSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.SimpleTypes obj)
        {
            if (obj.GuidValue != Guid.Empty)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteVarUInt32(18u); // BCL Guid: 2*(tag+fixed64) = 2*(1+8) = 18 bytes
                // Field 1: low (tag + fixed64)
                calculator.WriteTag(1, WireType.Fixed64b);
                calculator.WriteFixed64(0ul); // placeholder
                // Field 2: high (tag + fixed64)
                calculator.WriteTag(2, WireType.Fixed64b);
                calculator.WriteFixed64(0ul); // placeholder
            }

        }

        public static void CalculateASize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.A obj)
        {

            switch (obj)
            {
                case global::Model.B obj1:
                    calculator.WriteTag(5, WireType.Len);
                    var lengthBefore5 = calculator.Length;
                    CalculateBSize(ref calculator, obj1);
                    var contentLength5 = calculator.Length - lengthBefore5;
                    calculator.WriteVarUInt32((uint)contentLength5);
                    break;
            }
            if (obj.StringA != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringA);
            }

        }

        public static void CalculateBSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.B obj)
        {

            calculator.WriteTag(5, WireType.Len);
            var tempCalcContent = new global::GProtobuf.Core.WriteSizeCalculator();
            SizeCalculators.CalculateBContentSize(ref tempCalcContent, obj);
            calculator.WriteVarUInt32((uint)tempCalcContent.Length);
            if (obj.StringA != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringA);
            }

        }

        public static void CalculateCSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.C obj)
        {

            calculator.WriteTag(5, WireType.Len);
            var tempCalc5 = new global::GProtobuf.Core.WriteSizeCalculator();
            tempCalc5.WriteTag(10, WireType.Len);
            var tempCalcC = new global::GProtobuf.Core.WriteSizeCalculator();
            CalculateCContentSize(ref tempCalcC, obj);
            tempCalc5.WriteVarUInt32((uint)tempCalcC.Length);
            tempCalc5.WriteRawBytes(new byte[tempCalcC.Length]);
            CalculateBContentSize(ref tempCalc5, obj);
            calculator.WriteVarUInt32((uint)tempCalc5.Length);
            if (obj.StringA != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringA);
            }

        }

        public static void CalculateA1Size(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.A1 obj)
        {
            if (obj.B1 != null)
            {
                calculator.WriteTag(5, WireType.Len);
                var lengthBefore5 = calculator.Length;
                SizeCalculators.CalculateB1Size(ref calculator, obj.B1);
                var contentLength5 = calculator.Length - lengthBefore5;
                calculator.WriteVarUInt32((uint)contentLength5);
            }

            if (obj.StringA != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringA);
            }

        }

        public static void CalculateB1Size(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.B1 obj)
        {
            if (obj.C1 != null)
            {
                calculator.WriteTag(10, WireType.Len);
                var lengthBefore10 = calculator.Length;
                SizeCalculators.CalculateC1Size(ref calculator, obj.C1);
                var contentLength10 = calculator.Length - lengthBefore10;
                calculator.WriteVarUInt32((uint)contentLength10);
            }

            if (obj.StringB != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringB);
            }

        }

        public static void CalculateC1Size(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.C1 obj)
        {
            if (obj.StringC != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringC);
            }

        }

        public static void CalculateModelClassBaseSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.ModelClassBase obj)
        {

            switch (obj)
            {
                case global::Model.ModelClass obj1:
                    calculator.WriteTag(1, WireType.Len);
                    var lengthBefore1 = calculator.Length;
                    CalculateModelClassSize(ref calculator, obj1);
                    var contentLength1 = calculator.Length - lengthBefore1;
                    calculator.WriteVarUInt32((uint)contentLength1);
                    break;
                case global::Model.SecondModelClass obj1:
                    calculator.WriteTag(2, WireType.Len);
                    var lengthBefore2 = calculator.Length;
                    CalculateSecondModelClassSize(ref calculator, obj1);
                    var contentLength2 = calculator.Length - lengthBefore2;
                    calculator.WriteVarUInt32((uint)contentLength2);
                    break;
            }
            calculator.WriteTag(3122, WireType.Fixed64b);
            calculator.WriteDouble(obj.A);

            if (obj.B != 0)
            {
                calculator.WriteTag(201, WireType.VarInt);
                calculator.WriteVarint32(obj.B);
            }

            if (obj.Str != null)
            {
                calculator.WriteTag(1234568, WireType.Len);
                calculator.WriteString(obj.Str);
            }

        }

        public static void CalculateModelClassSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.ModelClass obj)
        {

            calculator.WriteTag(1, WireType.Len);
            var tempCalcContent = new global::GProtobuf.Core.WriteSizeCalculator();
            SizeCalculators.CalculateModelClassContentSize(ref tempCalcContent, obj);
            calculator.WriteVarUInt32((uint)tempCalcContent.Length);
            calculator.WriteTag(3122, WireType.Fixed64b);
            calculator.WriteDouble(obj.A);

            if (obj.B != 0)
            {
                calculator.WriteTag(201, WireType.VarInt);
                calculator.WriteVarint32(obj.B);
            }

            if (obj.Str != null)
            {
                calculator.WriteTag(1234568, WireType.Len);
                calculator.WriteString(obj.Str);
            }

        }

        public static void CalculateSecondModelClassSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.SecondModelClass obj)
        {

            calculator.WriteTag(2, WireType.Len);
            calculator.WriteVarint32(0); // No fields inside final ProtoInclude
            calculator.WriteTag(3122, WireType.Fixed64b);
            calculator.WriteDouble(obj.A);

            if (obj.B != 0)
            {
                calculator.WriteTag(201, WireType.VarInt);
                calculator.WriteVarint32(obj.B);
            }

            if (obj.Str != null)
            {
                calculator.WriteTag(1234568, WireType.Len);
                calculator.WriteString(obj.Str);
            }

        }

        public static void CalculateClassWithCollectionsSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.ClassWithCollections obj)
        {
            if (obj.SomeInt != 0)
            {
                calculator.WriteTag(1, WireType.VarInt);
                calculator.WriteVarint32(obj.SomeInt);
            }

            if (obj.Bytes != null)
            {
                calculator.WriteTag(6, WireType.Len);
                calculator.WriteBytes(obj.Bytes);
            }

            if (obj.PackedInts != null)
            {
                calculator.WriteTag(7, WireType.Len);
                calculator.WritePackedVarintArray(obj.PackedInts);
            }

            if (obj.PackedFixedSizeInts != null)
            {
                calculator.WriteTag(8, WireType.Len);
                calculator.WritePackedFixedSizeIntArray(obj.PackedFixedSizeInts);
            }

            if (obj.NonPackedInts != null)
            {
                var tagAndWire = Utils.GetTagAndWireType(9, WireType.VarInt);
                foreach(var v in obj.NonPackedInts) { calculator.WriteVarint32(tagAndWire); calculator.WriteVarint32(v); }
            }

            if (obj.NonPackedFixedSizeInts != null)
            {
                var tagAndWire = Utils.GetTagAndWireType(10, WireType.Fixed32b);
                foreach(var v in obj.NonPackedFixedSizeInts) { calculator.WriteVarint32(tagAndWire); calculator.WriteFixedSizeInt32(v); }
            }

        }


        public static void CalculateSimpleTypesContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.SimpleTypes obj)
        {
            if (obj.GuidValue != Guid.Empty)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteVarUInt32(18u); // BCL Guid: 2*(tag+fixed64) = 2*(1+8) = 18 bytes
                // Field 1: low (tag + fixed64)
                calculator.WriteTag(1, WireType.Fixed64b);
                calculator.WriteFixed64(0ul); // placeholder
                // Field 2: high (tag + fixed64)
                calculator.WriteTag(2, WireType.Fixed64b);
                calculator.WriteFixed64(0ul); // placeholder
            }

        }

        public static void CalculateAContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.A obj)
        {
            if (obj.StringA != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringA);
            }

        }

        public static void CalculateBContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.B obj)
        {
            if (obj.StringB != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringB);
            }

        }

        public static void CalculateCContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.C obj)
        {
            if (obj.StringC != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringC);
            }

        }

        public static void CalculateA1ContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.A1 obj)
        {
            if (obj.B1 != null)
            {
                calculator.WriteTag(5, WireType.Len);
                var lengthBefore5 = calculator.Length;
                SizeCalculators.CalculateB1Size(ref calculator, obj.B1);
                var contentLength5 = calculator.Length - lengthBefore5;
                calculator.WriteVarUInt32((uint)contentLength5);
            }

            if (obj.StringA != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringA);
            }

        }

        public static void CalculateB1ContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.B1 obj)
        {
            if (obj.C1 != null)
            {
                calculator.WriteTag(10, WireType.Len);
                var lengthBefore10 = calculator.Length;
                SizeCalculators.CalculateC1Size(ref calculator, obj.C1);
                var contentLength10 = calculator.Length - lengthBefore10;
                calculator.WriteVarUInt32((uint)contentLength10);
            }

            if (obj.StringB != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringB);
            }

        }

        public static void CalculateC1ContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.C1 obj)
        {
            if (obj.StringC != null)
            {
                calculator.WriteTag(1, WireType.Len);
                calculator.WriteString(obj.StringC);
            }

        }

        public static void CalculateModelClassBaseContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.ModelClassBase obj)
        {
            calculator.WriteTag(3122, WireType.Fixed64b);
            calculator.WriteDouble(obj.A);

            if (obj.B != 0)
            {
                calculator.WriteTag(201, WireType.VarInt);
                calculator.WriteVarint32(obj.B);
            }

            if (obj.Str != null)
            {
                calculator.WriteTag(1234568, WireType.Len);
                calculator.WriteString(obj.Str);
            }

        }

        public static void CalculateModelClassContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.ModelClass obj)
        {
            if (obj.D != 0)
            {
                calculator.WriteTag(1, WireType.VarInt);
                calculator.WriteVarint32(obj.D);
            }

            if (obj.Model2 != null)
            {
                calculator.WriteTag(2, WireType.Len);
                var lengthBefore2 = calculator.Length;
                SizeCalculators.CalculateClassWithCollectionsSize(ref calculator, obj.Model2);
                var contentLength2 = calculator.Length - lengthBefore2;
                calculator.WriteVarUInt32((uint)contentLength2);
            }

        }

        public static void CalculateSecondModelClassContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.SecondModelClass obj)
        {
        }

        public static void CalculateClassWithCollectionsContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::Model.ClassWithCollections obj)
        {
            if (obj.SomeInt != 0)
            {
                calculator.WriteTag(1, WireType.VarInt);
                calculator.WriteVarint32(obj.SomeInt);
            }

            if (obj.Bytes != null)
            {
                calculator.WriteTag(6, WireType.Len);
                calculator.WriteBytes(obj.Bytes);
            }

            if (obj.PackedInts != null)
            {
                calculator.WriteTag(7, WireType.Len);
                calculator.WritePackedVarintArray(obj.PackedInts);
            }

            if (obj.PackedFixedSizeInts != null)
            {
                calculator.WriteTag(8, WireType.Len);
                calculator.WritePackedFixedSizeIntArray(obj.PackedFixedSizeInts);
            }

            if (obj.NonPackedInts != null)
            {
                var tagAndWire = Utils.GetTagAndWireType(9, WireType.VarInt);
                foreach(var v in obj.NonPackedInts) { calculator.WriteVarint32(tagAndWire); calculator.WriteVarint32(v); }
            }

            if (obj.NonPackedFixedSizeInts != null)
            {
                var tagAndWire = Utils.GetTagAndWireType(10, WireType.Fixed32b);
                foreach(var v in obj.NonPackedFixedSizeInts) { calculator.WriteVarint32(tagAndWire); calculator.WriteFixedSizeInt32(v); }
            }

        }


        public static void CalculateGuidSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, Guid value)
        {
            calculator.WriteGuid(value);
        }
    }
}
