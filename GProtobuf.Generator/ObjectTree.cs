using GProtobuf.Core;
using System;
using System.Collections.Generic;

namespace GProtobuf.Generator;

public sealed record TypeDefinition(
    bool IsStruct,
    string FullName,
    List<ProtoIncludeAttribute> ProtoIncludes, // List of ProtoInclude derived classes
    List<ProtoMemberAttribute> ProtoMembers);

class ObjectTree
{
    private Dictionary<string, List<TypeDefinition>> types = new();

    private Dictionary<string, string> baseClassesForTypes = new();

    public void AddType(string nmspace, string fullName, bool isStruct, List<ProtoIncludeAttribute> protoIncludes, List<ProtoMemberAttribute> protoMembers)
    {
        AddType(nmspace, new TypeDefinition(isStruct, fullName, protoIncludes, protoMembers));
    }

    public void AddType(string @namespace, TypeDefinition typeDefinition)
    {
        if (!types.TryGetValue(@namespace, out var typeDefinitions))
        {
            typeDefinitions = [];
            types[@namespace] = typeDefinitions;
        }

        typeDefinitions.Add(typeDefinition);

        if (typeDefinition.ProtoIncludes != null)
        {
            foreach (var protoInclude in typeDefinition.ProtoIncludes)
            {
                if (!baseClassesForTypes.ContainsKey(protoInclude.Type))
                {
                    baseClassesForTypes[protoInclude.Type] = typeDefinition.FullName;
                }
            }
        }
    }

    public IEnumerable<(string FileName, string FileCode)> GenerateCode()
    {
        var sb = new StringBuilderWithIndent();

        foreach (var namespaceWithObjects in types)
        {
            var nmspace = namespaceWithObjects.Key;
            GenerateCode(sb, namespaceWithObjects, nmspace);

            yield return (nmspace + ".Serialization.cs", sb.ToString());
        }
    }

    private static void GenerateCode(
        StringBuilderWithIndent sb,
        KeyValuePair<string, List<TypeDefinition>> namespaceWithObjects,
        string nmspace)
    {
        sb.Clear();
        sb.AppendIndentedLine("// <auto-generated/>");
        sb.AppendIndentedLine("using GProtobuf.Core;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Text;\r\n");

        var objects = namespaceWithObjects.Value;

        sb.AppendIndentedLine($"namespace {nmspace}.Serialization");
        sb.StartNewBlock();
        sb.AppendIndentedLine("public static class Deserializers");
        sb.StartNewBlock();

        foreach (var obj in objects)
        {
            sb.AppendIndentedLine($"public static global::{obj.FullName} Deserialize{GetClassNameFromFullName(obj.FullName)}(ReadOnlySpan<byte> data)");
            sb.StartNewBlock();
            sb.AppendIndentedLine("var reader = new SpanReader(data);");
            sb.AppendIndentedLine($"return SpanReaders.Read{GetClassNameFromFullName(obj.FullName)}(ref reader);");
            sb.EndBlock();
            sb.AppendNewLine();
        }

        sb.EndBlock();

        sb.AppendNewLine();

        sb.AppendIndentedLine("public static class Serializers");
        sb.StartNewBlock();

        foreach (var obj in objects)
        {
            sb.AppendIndentedLine($"public static void Serialize{GetClassNameFromFullName(obj.FullName)}(Stream stream, global::{obj.FullName} obj)");
            sb.StartNewBlock();
            sb.AppendIndentedLine("var writer = new global::GProtobuf.Core.StreamWriter(stream);");
            sb.AppendIndentedLine($"StreamWriters.Write{GetClassNameFromFullName(obj.FullName)}(writer, obj);");
            sb.EndBlock();
            sb.AppendNewLine();
        }

        sb.EndBlock();

        sb.AppendNewLine();

        sb.AppendIndentedLine($"public static class SpanReaders");
        sb.StartNewBlock();

        foreach (var obj in objects)
        {
            sb.AppendIndentedLine($"public static global::{obj.FullName} Read{GetClassNameFromFullName(obj.FullName)}(ref SpanReader reader)");
            sb.StartNewBlock();

            if (obj.ProtoIncludes.Count == 0)
                sb.AppendIndentedLine($"global::{obj.FullName} result = new global::{obj.FullName}();\r\n");
            else
                sb.AppendIndentedLine($"global::{obj.FullName} result = default(global::{obj.FullName});\r\n");

            sb.AppendIndentedLine($"while(!reader.IsEnd)");
            sb.StartNewBlock();
            sb.AppendIndentedLine($"var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();\r\n");

            if (obj.ProtoIncludes != null)
            {
                WriteProtoIncludesInDeserializers(sb, obj);
            }

            if (obj.ProtoMembers != null)
            {
                foreach (var protoMember in obj.ProtoMembers)
                {
                    WriteProtoMember(sb, protoMember);
                }
            }
            sb.AppendIndentedLine($"// default");
            sb.AppendIndentedLine($"reader.SkipField(wireType);");
            sb.EndBlock();// end of main while loop

            sb.AppendNewLine();
            sb.AppendIndentedLine($"return result;");
            sb.EndBlock();
            sb.AppendNewLine();
        }

        sb.EndBlock();

        sb.AppendNewLine();

        sb.AppendIndentedLine("public static class StreamWriters");
        sb.StartNewBlock();

        foreach (var obj in objects)
        {
            sb.AppendIndentedLine($"public static void Write{GetClassNameFromFullName(obj.FullName)}(global::GProtobuf.Core.StreamWriter writer, global::{obj.FullName} obj)");
            sb.StartNewBlock();

            if (obj.ProtoIncludes.Count > 0)
            {
                sb.AppendNewLine();
                sb.AppendIndentedLine("switch (obj)");
                sb.StartNewBlock();
                foreach (var include in obj.ProtoIncludes)
                {
                    var className = GetClassNameFromFullName(include.Type);
                    sb.AppendIndentedLine($"case global::{include.Type} obj1:");
                    sb.IncreaseIndent();
                    sb.AppendIndentedLine($"writer.WriteTag({include.FieldId}, WireType.Len);");
                    sb.AppendIndentedLine("writer.WriteVarint32(0);"); // todo protobuf-net writes length here
                    
                    sb.AppendIndentedLine($"Write{className}(writer, obj1);");
                    sb.AppendIndentedLine("return;");
                    sb.DecreaseIndent();
                }
                sb.EndBlock();
            }

            if (obj.ProtoMembers != null)
            {
                foreach (var protoMember in obj.ProtoMembers)
                {
                    WriteProtoMemberSerializer(sb, protoMember);
                }
            }

            sb.EndBlock();
            sb.AppendNewLine();
        }

        sb.EndBlock();
        sb.EndBlock();
    }

    private static void WriteProtoIncludesInDeserializers(StringBuilderWithIndent sb, TypeDefinition obj)
    {
        if (obj.ProtoIncludes.Count <= 0) return;

        foreach (var protoInclude in obj.ProtoIncludes)
        {
            //protoInclude.Type
            sb.AppendIndentedLine($"if (fieldId == {protoInclude.FieldId})");
            sb.StartNewBlock();
            sb.AppendIndentedLine($"var length = reader.ReadVarInt32();");
            sb.AppendIndentedLine($"var reader1 = new SpanReader(reader.GetSlice(length));");
            //sb.AppendLine($"\t\t\t\t\tresult = reader1.Read{GetClassNameFromFullName(protoInclude.Type)}();");
            sb.AppendIndentedLine($"result = global::{protoInclude.Namespace}.Serialization.SpanReaders.Read{GetClassNameFromFullName(protoInclude.Type)}(ref reader1);");

            sb.AppendIndentedLine($"continue;");
            //sb.AppendIndentedLine($"\t\t\t\t}}\r\n");
            sb.EndBlock();
            sb.AppendNewLine();
        }
        
        sb.AppendIndentedLine($"if (result == null)");
        sb.AppendIndentedLine($"throw new InvalidOperationException($\"ProtoInclude field must be first. Is {{fieldId}} defined in ProtoInclude attributes?\");\r\n");
        // todo hybrid binary tree for many proto includes
    }

    private static void WriteProtoMember(StringBuilderWithIndent sb, ProtoMemberAttribute protoMember)
    {
        sb.AppendIndentedLine($"if (fieldId == {protoMember.FieldId})");
        sb.StartNewBlock();
        switch(GetClassNameFromFullName(protoMember.Type))
        {
            case "System.Int32":
            case "Int32":
            case "int":
                switch (protoMember.DataFormat)
                {
                    case DataFormat.FixedSize:
                        sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadFixedInt32();");
                        break;

                    case DataFormat.ZigZag:
                        sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadZigZagVarInt32();");
                        break;

                    default:
                        sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadVarInt32();");
                        break;
                }
                break;

            case "Double":
            case "double":
                sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadDouble(wireType);");
                break;

            case "Single":
            case "single":
            case "float":
                sb.AppendIndentedLine($"result.{protoMember.Name} = (float)reader.ReadDouble(wireType);");
                break;

            case "String":
            case "System.String":
            case "string":
                sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadString(wireType);");
                break;

            case "byte[]":
            case "Byte[]":
            case "System.Byte[]":
                sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadByteArray();");
                break;

            case "System.Int32[]":
            case "Int32[]":
            case "int[]":
                if (protoMember.IsPacked)
                {
                    switch (protoMember.DataFormat)
                    {
                        case DataFormat.FixedSize:
                            sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadPackedFixedSizeInt32Array();");
                            break;

                        case DataFormat.ZigZag:
                            sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadPackedVarIntInt32Array(true);");
                            break;

                        default:
                            sb.AppendIndentedLine($"result.{protoMember.Name} = reader.ReadPackedVarIntInt32Array(false);");
                            break;
                    }
                }
                else
                {
                    string int32Reader = null;

                    switch (protoMember.DataFormat)
                    {
                        case DataFormat.FixedSize:
                            int32Reader = String.Format($"reader.ReadFixedInt32();");
                            break;

                        case DataFormat.ZigZag:
                            int32Reader = String.Format($"reader.ReadZigZagVarInt32();");
                            break;

                        default:
                            int32Reader = String.Format($"reader.ReadVarInt32();");
                            break;
                    }

                    sb.AppendIndentedLine($"List<int> resultList = new();");
                    sb.AppendIndentedLine($"var wireType1 = wireType;");
                    sb.AppendIndentedLine($"var fieldId1 = fieldId;");
                    sb.AppendNewLine();
                    sb.AppendIndentedLine($"while (!reader.IsEnd)");
                    sb.StartNewBlock();
                    sb.AppendIndentedLine($"var number = {int32Reader}");
                    sb.AppendIndentedLine($"var p = reader.Position;");
                    sb.AppendIndentedLine($"resultList.Add(number);");
                    sb.AppendIndentedLine($"(wireType1, fieldId1) = reader.ReadWireTypeAndFieldId();");
                    sb.AppendIndentedLine($"if (fieldId1 != fieldId)");
                    sb.StartNewBlock();
                    sb.AppendIndentedLine($"reader.Position = p; // rewind");
                    sb.AppendIndentedLine($"break;");
                    sb.EndBlock();
                    sb.EndBlock();
                    sb.AppendNewLine();
                    sb.AppendIndentedLine($"result.{protoMember.Name} = resultList.ToArray();");
                }
                break;

            default:

                sb.AppendIndentedLine($"var length = reader.ReadVarInt32();");
                sb.AppendIndentedLine($"var reader1 = new SpanReader(reader.GetSlice(length));");
                sb.AppendIndentedLine($"result.{protoMember.Name} = global::{protoMember.Namespace}.Serialization.SpanReaders.Read{GetClassNameFromFullName(protoMember.Type)}(ref reader1);");
                break;
        }
        sb.AppendIndentedLine($"continue;");
        sb.EndBlock();
        sb.AppendNewLine();
    }

    private static void WriteProtoMemberSerializer(StringBuilderWithIndent sb, ProtoMemberAttribute protoMember)
    {
        var typeName = GetClassNameFromFullName(protoMember.Type);

        switch (typeName)
        {
            case "System.Int32":
            case "Int32":
            case "int":
                sb.AppendIndentedLine($"if (obj.{protoMember.Name} != 0)");
                sb.StartNewBlock();
                switch (protoMember.DataFormat)
                {
                    case DataFormat.FixedSize:
                        sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Fixed32b);");
                        sb.AppendIndentedLine($"writer.WriteFixedSizeInt32(obj.{protoMember.Name});");
                        break;
                    case DataFormat.ZigZag:
                        sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.VarInt);");
                        sb.AppendIndentedLine($"writer.WriteZigZag32(obj.{protoMember.Name});");
                        break;
                    default:
                        sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.VarInt);");
                        sb.AppendIndentedLine($"writer.WriteVarint32(obj.{protoMember.Name});");
                        break;
                }
                sb.EndBlock();
                break;

            case "Double":
            case "double":
                sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Fixed64b);");
                sb.AppendIndentedLine($"writer.WriteDouble(obj.{protoMember.Name});");
                break;

            case "Single":
            case "single":
            case "float":
                sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Fixed32b);");
                sb.AppendIndentedLine($"writer.WriteFloat(obj.{protoMember.Name});");
                break;

            case "String":
            case "System.String":
            case "string":
                sb.AppendIndentedLine($"if (obj.{protoMember.Name} != null)");
                sb.StartNewBlock();
                sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Len);");
                sb.AppendIndentedLine($"writer.WriteVarint32((uint)Encoding.UTF8.GetByteCount(obj.{protoMember.Name}));");
                sb.AppendIndentedLine($"writer.WriteString(obj.{protoMember.Name});");
                sb.EndBlock();
                break;

            case "byte[]":
            case "Byte[]":
            case "System.Byte[]":
                sb.AppendIndentedLine($"if (obj.{protoMember.Name} != null)");
                sb.StartNewBlock();
                sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Len);");
                sb.AppendIndentedLine($"writer.WriteVarint32(obj.{protoMember.Name}.Length);");
                sb.AppendIndentedLine($"writer.Stream.Write(obj.{protoMember.Name});");
                sb.EndBlock();
                break;

            case "System.Int32[]":
            case "Int32[]":
            case "int[]":
                sb.AppendIndentedLine($"if (obj.{protoMember.Name} != null)");
                sb.StartNewBlock();
                if (protoMember.IsPacked)
                {
                    switch (protoMember.DataFormat)
                    {
                        case DataFormat.FixedSize:
                            sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Len);");
                            sb.AppendIndentedLine($"writer.WriteVarint32(obj.{protoMember.Name}.Length << 2);");
                            sb.AppendIndentedLine($"writer.WritePackedFixedSizeIntArray(obj.{protoMember.Name});");
                            break;
                        case DataFormat.ZigZag:
                            sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Len);");
                            sb.AppendIndentedLine($"var packedSize = Utils.GetVarintPackedCollectionSize(obj.{protoMember.Name});");
                            sb.AppendIndentedLine($"writer.WriteVarint32(packedSize);");
                            sb.AppendIndentedLine($"foreach(var v in obj.{protoMember.Name}) writer.WriteZigZag32(v);");
                            break;
                        default:
                            sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Len);");
                            sb.AppendIndentedLine($"var packedSize = Utils.GetVarintPackedCollectionSize(obj.{protoMember.Name});");
                            sb.AppendIndentedLine($"writer.WriteVarint32(packedSize);");
                            sb.AppendIndentedLine($"foreach(var v in obj.{protoMember.Name}) writer.WriteVarint32(v);");
                            break;
                    }
                }
                else
                {
                    switch (protoMember.DataFormat)
                    {
                        case DataFormat.FixedSize:
                            sb.AppendIndentedLine($"var tagAndWire = Utils.GetTagAndWireType({protoMember.FieldId}, WireType.Fixed32b);");
                            sb.AppendIndentedLine($"foreach(var v in obj.{protoMember.Name}) {{ writer.WriteVarint32(tagAndWire); writer.WriteFixedSizeInt32(v); }}");
                            break;
                        case DataFormat.ZigZag:
                            sb.AppendIndentedLine($"var tagAndWire = Utils.GetTagAndWireType({protoMember.FieldId}, WireType.VarInt);");
                            sb.AppendIndentedLine($"foreach(var v in obj.{protoMember.Name}) {{ writer.WriteVarint32(tagAndWire); writer.WriteZigZag32(v); }}");
                            break;
                        default:
                            sb.AppendIndentedLine($"var tagAndWire = Utils.GetTagAndWireType({protoMember.FieldId}, WireType.VarInt);");
                            sb.AppendIndentedLine($"foreach(var v in obj.{protoMember.Name}) {{ writer.WriteVarint32(tagAndWire); writer.WriteVarint32(v); }}");
                            break;
                    }
                }
                sb.EndBlock();
                break;

            default:
                sb.AppendIndentedLine($"if (obj.{protoMember.Name} != null)");
                sb.StartNewBlock();
                sb.AppendIndentedLine($"var ms = new MemoryStream();");
                sb.AppendIndentedLine($"global::{protoMember.Namespace}.Serialization.Serializers.Serialize{GetClassNameFromFullName(protoMember.Type)}(ms, obj.{protoMember.Name});");
                sb.AppendIndentedLine($"writer.WriteTag({protoMember.FieldId}, WireType.Len);");
                sb.AppendIndentedLine($"writer.WriteVarint32((int)ms.Length);");
                sb.AppendIndentedLine($"ms.Position = 0;");
                sb.AppendIndentedLine($"ms.CopyTo(writer.Stream);");
                sb.EndBlock();
                break;
        }

        sb.AppendNewLine();
    }

    static string BoolToSource(bool value)
    {
        return value.ToString().ToLower();
    }

    public static string GetClassNameFromFullName(string fullTypeName)
    {
        if (string.IsNullOrWhiteSpace(fullTypeName))
            return string.Empty;

        // Odstránime ? na konci (nullable)
        if (fullTypeName.EndsWith("?"))
        {
            fullTypeName = fullTypeName.Substring(0, fullTypeName.Length - 1);
        }

        // Rozdelíme podľa bodiek a vezmeme poslednú časť
        string[] parts = fullTypeName.Split('.');
        return parts.Length > 0 ? parts[parts.Length - 1] : string.Empty;
    }
}