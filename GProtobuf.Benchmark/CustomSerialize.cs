// <auto-generated/>
using GProtobuf.Core;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace GProtobuf.Benchmark.Models.Serialization
{
    public static class Deserializers2
    {
        public static global::GProtobuf.Benchmark.Models.NestedMessagesModel DeserializeNestedMessagesModel(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders2.ReadNestedMessagesModel(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.PersonModel DeserializePersonModel(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders2.ReadPersonModel(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.AddressModel DeserializeAddressModel(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders2.ReadAddressModel(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.CompanyModel DeserializeCompanyModel(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders2.ReadCompanyModel(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.CollectionsModel DeserializeCollectionsModel(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders2.ReadCollectionsModel(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.PrimitiveTypesModel DeserializePrimitiveTypesModel(ReadOnlySpan<byte> data)
        {
            var reader = new SpanReader(data);
            return SpanReaders2.ReadPrimitiveTypesModel(ref reader);
        }

    }

    public static class Serializers2
    {
        public static void SerializeNestedMessagesModel(Stream stream, global::GProtobuf.Benchmark.Models.NestedMessagesModel obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream, stackalloc byte[256]);
            StreamWriters2.WriteNestedMessagesModel(ref writer, obj);
            writer.Flush();
        }

        public static void SerializePersonModel(Stream stream, global::GProtobuf.Benchmark.Models.PersonModel obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream, stackalloc byte[256]);
            StreamWriters2.WritePersonModel(ref writer, obj);
            writer.Flush();
        }

        public static void SerializeAddressModel(Stream stream, global::GProtobuf.Benchmark.Models.AddressModel obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream, stackalloc byte[256]);
            StreamWriters2.WriteAddressModel(ref writer, obj);
            writer.Flush();
        }

        public static void SerializeCompanyModel(Stream stream, global::GProtobuf.Benchmark.Models.CompanyModel obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream, stackalloc byte[256]);
            StreamWriters2.WriteCompanyModel(ref writer, obj);
            writer.Flush();
        }

        public static void SerializeCollectionsModel(Stream stream, global::GProtobuf.Benchmark.Models.CollectionsModel obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream, stackalloc byte[256]);
            StreamWriters2.WriteCollectionsModel(ref writer, obj);
            writer.Flush();
        }

        public static void SerializePrimitiveTypesModel(Stream stream, global::GProtobuf.Benchmark.Models.PrimitiveTypesModel obj)
        {
            var writer = new global::GProtobuf.Core.StreamWriter(stream, stackalloc byte[256]);
            StreamWriters2.WritePrimitiveTypesModel(ref writer, obj);
            writer.Flush();
        }

    }

    public static class SpanReaders2
    {
        public static global::GProtobuf.Benchmark.Models.NestedMessagesModel ReadNestedMessagesModel(ref SpanReader reader)
        {
            return ReadNestedMessagesModelContent(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.PersonModel ReadPersonModel(ref SpanReader reader)
        {
            return ReadPersonModelContent(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.AddressModel ReadAddressModel(ref SpanReader reader)
        {
            return ReadAddressModelContent(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.CompanyModel ReadCompanyModel(ref SpanReader reader)
        {
            return ReadCompanyModelContent(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.CollectionsModel ReadCollectionsModel(ref SpanReader reader)
        {
            return ReadCollectionsModelContent(ref reader);
        }

        public static global::GProtobuf.Benchmark.Models.PrimitiveTypesModel ReadPrimitiveTypesModel(ref SpanReader reader)
        {
            return ReadPrimitiveTypesModelContent(ref reader);
        }


        public static global::GProtobuf.Benchmark.Models.NestedMessagesModel ReadNestedMessagesModelContent(ref SpanReader reader)
        {
            global::GProtobuf.Benchmark.Models.NestedMessagesModel result = new global::GProtobuf.Benchmark.Models.NestedMessagesModel();

            while (!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 100)
                {
                    result.StringField1 = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 101)
                {
                    result.StringField2 = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 102)
                {
                    result.StringField3 = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 103)
                {
                    result.StringField4 = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 104)
                {
                    result.StringField5 = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 1)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.Person = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadPersonModel(ref reader1);
                    continue;
                }

                if (fieldId == 2)
                {
                    List<GProtobuf.Benchmark.Models.PersonModel> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Len)
                    {
                        var length = reader.ReadVarInt32();
                        var reader1 = new SpanReader(reader.GetSlice(length));
                        var item = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadPersonModel(ref reader1);
                        resultList.Add(item);
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.People = resultList;
                    continue;
                }

                if (fieldId == 3)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.Address = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadAddressModel(ref reader1);
                    continue;
                }

                if (fieldId == 4)
                {
                    List<GProtobuf.Benchmark.Models.AddressModel> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Len)
                    {
                        var length = reader.ReadVarInt32();
                        var reader1 = new SpanReader(reader.GetSlice(length));
                        var item = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadAddressModel(ref reader1);
                        resultList.Add(item);
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.Addresses = resultList;
                    continue;
                }

                if (fieldId == 5)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.Company = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadCompanyModel(ref reader1);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::GProtobuf.Benchmark.Models.PersonModel ReadPersonModelContent(ref SpanReader reader)
        {
            global::GProtobuf.Benchmark.Models.PersonModel result = new global::GProtobuf.Benchmark.Models.PersonModel();

            while (!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.FirstName = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 2)
                {
                    result.LastName = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 3)
                {
                    result.Age = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 4)
                {
                    result.Email = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 5)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.Address = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadAddressModel(ref reader1);
                    continue;
                }

                if (fieldId == 6)
                {
                    List<string> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Len)
                    {
                        resultList.Add(reader.ReadString(wireType));
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.PhoneNumbers = resultList;
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::GProtobuf.Benchmark.Models.AddressModel ReadAddressModelContent(ref SpanReader reader)
        {
            global::GProtobuf.Benchmark.Models.AddressModel result = new global::GProtobuf.Benchmark.Models.AddressModel();

            while (!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.Street = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 2)
                {
                    result.City = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 3)
                {
                    result.State = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 4)
                {
                    result.ZipCode = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 5)
                {
                    result.Country = reader.ReadString(wireType);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::GProtobuf.Benchmark.Models.CompanyModel ReadCompanyModelContent(ref SpanReader reader)
        {
            global::GProtobuf.Benchmark.Models.CompanyModel result = new global::GProtobuf.Benchmark.Models.CompanyModel();

            while (!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.Name = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 2)
                {
                    var length = reader.ReadVarInt32();
                    var reader1 = new SpanReader(reader.GetSlice(length));
                    result.HeadquartersAddress = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadAddressModel(ref reader1);
                    continue;
                }

                if (fieldId == 3)
                {
                    List<GProtobuf.Benchmark.Models.PersonModel> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Len)
                    {
                        var length = reader.ReadVarInt32();
                        var reader1 = new SpanReader(reader.GetSlice(length));
                        var item = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadPersonModel(ref reader1);
                        resultList.Add(item);
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.Employees = resultList;
                    continue;
                }

                if (fieldId == 4)
                {
                    List<GProtobuf.Benchmark.Models.AddressModel> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Len)
                    {
                        var length = reader.ReadVarInt32();
                        var reader1 = new SpanReader(reader.GetSlice(length));
                        var item = global::GProtobuf.Benchmark.Models.Serialization.SpanReaders.ReadAddressModel(ref reader1);
                        resultList.Add(item);
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.Offices = resultList;
                    continue;
                }

                if (fieldId == 5)
                {
                    result.FoundedYear = reader.ReadVarInt32();
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::GProtobuf.Benchmark.Models.CollectionsModel ReadCollectionsModelContent(ref SpanReader reader)
        {
            global::GProtobuf.Benchmark.Models.CollectionsModel result = new global::GProtobuf.Benchmark.Models.CollectionsModel();

            while (!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    List<int> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.VarInt)
                    {
                        resultList.Add(reader.ReadVarInt32());
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.IntList = resultList;
                    continue;
                }

                if (fieldId == 2)
                {
                    List<long> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.VarInt)
                    {
                        resultList.Add(reader.ReadVarInt64());
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.LongList = resultList;
                    continue;
                }

                if (fieldId == 3)
                {
                    List<float> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Fixed32b)
                    {
                        resultList.Add(reader.ReadFloat(wireType1));
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.FloatList = resultList;
                    continue;
                }

                if (fieldId == 4)
                {
                    List<double> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Fixed64b)
                    {
                        resultList.Add(reader.ReadDouble(wireType1));
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.DoubleList = resultList;
                    continue;
                }

                if (fieldId == 5)
                {
                    List<string> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Len)
                    {
                        resultList.Add(reader.ReadString(wireType));
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.StringList = resultList;
                    continue;
                }

                if (fieldId == 6)
                {
                    List<int> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.VarInt)
                    {
                        resultList.Add(reader.ReadVarInt32());
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.IntArray = resultList.ToArray();
                    continue;
                }

                if (fieldId == 7)
                {
                    List<float> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Fixed32b)
                    {
                        resultList.Add(reader.ReadFloat(wireType1));
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.FloatArray = resultList.ToArray();
                    continue;
                }

                if (fieldId == 8)
                {
                    List<double> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Fixed64b)
                    {
                        resultList.Add(reader.ReadDouble(wireType1));
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.DoubleArray = resultList.ToArray();
                    continue;
                }

                if (fieldId == 9)
                {
                    List<string> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Len)
                    {
                        resultList.Add(reader.ReadString(wireType));
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.StringArray = resultList.ToArray();
                    continue;
                }

                if (fieldId == 10)
                {
                    List<int> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.Fixed32b)
                    {
                        resultList.Add(reader.ReadFixedInt32());
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.PackedFixedIntList = resultList;
                    continue;
                }

                if (fieldId == 11)
                {
                    List<int> resultList = new();
                    var wireType1 = wireType;
                    var fieldId1 = fieldId;
                    while (fieldId1 == fieldId && wireType1 == WireType.VarInt)
                    {
                        resultList.Add(reader.ReadZigZagVarInt32());
                        if (reader.EndOfData) break;
                        var p = reader.Position;
                        (wireType1, fieldId1) = reader.ReadKey();
                        if (fieldId1 != fieldId)
                        {
                            reader.Position = p; // rewind
                            break;
                        }
                    }
                    result.PackedZigZagIntList = resultList;
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

        public static global::GProtobuf.Benchmark.Models.PrimitiveTypesModel ReadPrimitiveTypesModelContent(ref SpanReader reader)
        {
            global::GProtobuf.Benchmark.Models.PrimitiveTypesModel result = new global::GProtobuf.Benchmark.Models.PrimitiveTypesModel();

            while (!reader.IsEnd)
            {
                var (wireType, fieldId) = reader.ReadWireTypeAndFieldId();

                if (fieldId == 1)
                {
                    result.IntValue = reader.ReadVarInt32();
                    continue;
                }

                if (fieldId == 2)
                {
                    result.LongValue = reader.ReadInt64(wireType, false);
                    continue;
                }

                if (fieldId == 3)
                {
                    result.FloatValue = reader.ReadFloat(wireType);
                    continue;
                }

                if (fieldId == 4)
                {
                    result.DoubleValue = reader.ReadDouble(wireType);
                    continue;
                }

                if (fieldId == 5)
                {
                    result.BoolValue = reader.ReadBool(wireType);
                    continue;
                }

                if (fieldId == 6)
                {
                    result.StringValue = reader.ReadString(wireType);
                    continue;
                }

                if (fieldId == 7)
                {
                    var byteArray = reader.ReadByteArray();
                    result.ByteArrayValue = byteArray;
                    continue;
                }

                if (fieldId == 8)
                {
                    result.FixedIntValue = reader.ReadFixedInt32();
                    continue;
                }

                if (fieldId == 9)
                {
                    result.FixedLongValue = reader.ReadInt64(wireType, false);
                    continue;
                }

                if (fieldId == 10)
                {
                    result.ZigZagIntValue = reader.ReadZigZagVarInt32();
                    continue;
                }

                if (fieldId == 11)
                {
                    result.ZigZagLongValue = reader.ReadInt64(wireType, true);
                    continue;
                }

                // default
                reader.SkipField(wireType);
            }
            return result;
        }

    }

    public static class StreamWriters2
    {
        public static void WriteNestedMessagesModel(ref global::GProtobuf.Core.StreamWriter writer, global::GProtobuf.Benchmark.Models.NestedMessagesModel instance)
        {
            if (instance.StringField1 != null)
            {
                // Tag for field 100, Len
                writer.WriteBytes(stackalloc byte[] { 0xA2, 0x06 });
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringField1));
                writer.WriteString(instance.StringField1);
            }

            if (instance.StringField2 != null)
            {
                // Tag for field 101, Len
                writer.WriteBytes(stackalloc byte[] { 0xAA, 0x06 });
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringField2));
                writer.WriteString(instance.StringField2);
            }

            if (instance.StringField3 != null)
            {
                // Tag for field 102, Len
                writer.WriteBytes(stackalloc byte[] { 0xB2, 0x06 });
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringField3));
                writer.WriteString(instance.StringField3);
            }

            if (instance.StringField4 != null)
            {
                // Tag for field 103, Len
                writer.WriteBytes(stackalloc byte[] { 0xBA, 0x06 });
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringField4));
                writer.WriteString(instance.StringField4);
            }

            if (instance.StringField5 != null)
            {
                // Tag for field 104, Len
                writer.WriteBytes(stackalloc byte[] { 0xC2, 0x06 });
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringField5));
                writer.WriteString(instance.StringField5);
            }

            if (instance.Person != null)
            {
                //var calculator1 = new global::GProtobuf.Core.WriteSizeCalculator();
                //SizeCalculators2.CalculatePersonModelSize(ref calculator1, instance.Person);
                // Tag for field 1, Len
                writer.WriteSingleByte(0x0A);
                writer.WriteVarUInt32((uint)114);
                StreamWriters.WritePersonModel(ref writer, instance.Person);
            }

            if (instance.People != null)
            {
                for (int i = 0; i < instance.People.Count; i++)
                {
                    var item = instance.People[i];
                    if (item != null)
                    {
                        var calculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculatePersonModelSize(ref calculator, item);
                        // Tag for field 2, Len
                        writer.WriteSingleByte(0x12);
                        writer.WriteVarUInt32((uint)calculator.Length);
                        StreamWriters.WritePersonModel(ref writer, item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type PersonModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (instance.Address != null)
            {
                var calculator3 = new global::GProtobuf.Core.WriteSizeCalculator();
                SizeCalculators.CalculateAddressModelSize(ref calculator3, instance.Address);
                // Tag for field 3, Len
                writer.WriteSingleByte(0x1A);
                writer.WriteVarUInt32(46);// (uint)calculator3.Length);
                StreamWriters.WriteAddressModel(ref writer, instance.Address);
            }

            if (instance.Addresses != null)
            {
                for (int i = 0; i < instance.Addresses.Count; i++)
                {
                    var item = instance.Addresses[i];
                    if (item != null)
                    {
                        var calculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateAddressModelSize(ref calculator, item);
                        // Tag for field 4, Len
                        writer.WriteSingleByte(0x22);
                        writer.WriteVarUInt32((uint)calculator.Length);
                        StreamWriters.WriteAddressModel(ref writer, item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type AddressModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (instance.Company != null)
            {
                var calculator5 = new global::GProtobuf.Core.WriteSizeCalculator();
                SizeCalculators.CalculateCompanyModelSize(ref calculator5, instance.Company);
                // Tag for field 5, Len
                writer.WriteSingleByte(0x2A);
                writer.WriteVarUInt32((uint)calculator5.Length);
                StreamWriters.WriteCompanyModel(ref writer, instance.Company);
            }

        }

        public static void WritePersonModel(ref global::GProtobuf.Core.StreamWriter writer, global::GProtobuf.Benchmark.Models.PersonModel instance)
        {
            if (instance.FirstName != null)
            {
                // Tag for field 1, Len
                writer.WriteSingleByte(0x0A);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.FirstName));
                writer.WriteString(instance.FirstName);
            }

            if (instance.LastName != null)
            {
                // Tag for field 2, Len
                writer.WriteSingleByte(0x12);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.LastName));
                writer.WriteString(instance.LastName);
            }

            if (instance.Age != 0)
            {
                // Tag for field 3, VarInt
                writer.WriteSingleByte(0x18);
                writer.WriteVarInt32(instance.Age);
            }

            if (instance.Email != null)
            {
                // Tag for field 4, Len
                writer.WriteSingleByte(0x22);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.Email));
                writer.WriteString(instance.Email);
            }

            if (instance.Address != null)
            {
                var calculator5 = new global::GProtobuf.Core.WriteSizeCalculator();
                SizeCalculators.CalculateAddressModelSize(ref calculator5, instance.Address);
                // Tag for field 5, Len
                writer.WriteSingleByte(0x2A);
                writer.WriteVarUInt32((uint)calculator5.Length);
                StreamWriters.WriteAddressModel(ref writer, instance.Address);
            }

            if (instance.PhoneNumbers != null)
            {
                for (int i = 0; i < instance.PhoneNumbers.Count; i++)
                {
                    var item = instance.PhoneNumbers[i];
                    if (item != null)
                    {
                        // Tag for field 6, Len
                        writer.WriteSingleByte(0x32);
                        writer.WriteVarUInt32((uint)System.Text.Encoding.UTF8.GetByteCount(item));
                        writer.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
        }

        public static void WriteAddressModel(ref global::GProtobuf.Core.StreamWriter writer, global::GProtobuf.Benchmark.Models.AddressModel instance)
        {
            if (instance.Street != null)
            {
                // Tag for field 1, Len
                writer.WriteSingleByte(0x0A);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.Street));
                writer.WriteString(instance.Street);
            }

            if (instance.City != null)
            {
                // Tag for field 2, Len
                writer.WriteSingleByte(0x12);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.City));
                writer.WriteString(instance.City);
            }

            if (instance.State != null)
            {
                // Tag for field 3, Len
                writer.WriteSingleByte(0x1A);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.State));
                writer.WriteString(instance.State);
            }

            if (instance.ZipCode != null)
            {
                // Tag for field 4, Len
                writer.WriteSingleByte(0x22);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.ZipCode));
                writer.WriteString(instance.ZipCode);
            }

            if (instance.Country != null)
            {
                // Tag for field 5, Len
                writer.WriteSingleByte(0x2A);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.Country));
                writer.WriteString(instance.Country);
            }

        }

        public static void WriteCompanyModel(ref global::GProtobuf.Core.StreamWriter writer, global::GProtobuf.Benchmark.Models.CompanyModel instance)
        {
            if (instance.Name != null)
            {
                // Tag for field 1, Len
                writer.WriteSingleByte(0x0A);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.Name));
                writer.WriteString(instance.Name);
            }

            if (instance.HeadquartersAddress != null)
            {
                var calculator2 = new global::GProtobuf.Core.WriteSizeCalculator();
                SizeCalculators.CalculateAddressModelSize(ref calculator2, instance.HeadquartersAddress);
                // Tag for field 2, Len
                writer.WriteSingleByte(0x12);
                writer.WriteVarUInt32((uint)calculator2.Length);
                StreamWriters.WriteAddressModel(ref writer, instance.HeadquartersAddress);
            }

            if (instance.Employees != null)
            {
                for (int i = 0; i < instance.Employees.Count; i++)
                {
                    var item = instance.Employees[i];
                    if (item != null)
                    {
                        var calculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculatePersonModelSize(ref calculator, item);
                        // Tag for field 3, Len
                        writer.WriteSingleByte(0x1A);
                        writer.WriteVarUInt32((uint)calculator.Length);
                        StreamWriters.WritePersonModel(ref writer, item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type PersonModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (instance.Offices != null)
            {
                for (int i = 0; i < instance.Offices.Count; i++)
                {
                    var item = instance.Offices[i];
                    if (item != null)
                    {
                        var calculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateAddressModelSize(ref calculator, item);
                        // Tag for field 4, Len
                        writer.WriteSingleByte(0x22);
                        writer.WriteVarUInt32((uint)calculator.Length);
                        StreamWriters.WriteAddressModel(ref writer, item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type AddressModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (instance.FoundedYear != 0)
            {
                // Tag for field 5, VarInt
                writer.WriteSingleByte(0x28);
                writer.WriteVarInt32(instance.FoundedYear);
            }

        }

        public static void WriteCollectionsModel(ref global::GProtobuf.Core.StreamWriter writer, global::GProtobuf.Benchmark.Models.CollectionsModel instance)
        {
            if (instance.IntList != null)
            {
                foreach (var item in instance.IntList)
                {
                    // Tag for field 1, VarInt
                    writer.WriteSingleByte(0x08);
                    writer.WriteVarInt32(item);
                }
            }
            if (instance.LongList != null)
            {
                foreach (var item in instance.LongList)
                {
                    // Tag for field 2, VarInt
                    writer.WriteSingleByte(0x10);
                    writer.WriteVarInt64(item);
                }
            }
            if (instance.FloatList != null)
            {
                // Batched float serialization
                unsafe
                {
                    byte tag3 = 0x1D; // Single byte tag
                    System.Span<byte> batch = stackalloc byte[256];
                    int used = 0;
                    var span = System.Runtime.InteropServices.CollectionsMarshal.AsSpan(instance.FloatList);
                    fixed (byte* pBatch = batch)
                    {
                        for (int i = 0; i < span.Length; i++)
                        {
                            if (256 - used < 5)
                            {
                                writer.WriteBytes(batch.Slice(0, used));
                                used = 0;
                            }
                            var value = span[i];
                            byte* dst = pBatch + used;
                            *dst = tag3; // Direct byte assignment
                            *(uint*)(dst + 1) = *(uint*)&value;
                            used += 5;
                        }
                    }
                    if (used > 0)
                    {
                        writer.WriteBytes(batch.Slice(0, used));
                    }
                }
            }
            if (instance.DoubleList != null)
            {
                // Batched double serialization
                unsafe
                {
                    byte tag4 = 0x21; // Single byte tag
                    System.Span<byte> batch = stackalloc byte[256];
                    int used = 0;
                    var span = System.Runtime.InteropServices.CollectionsMarshal.AsSpan(instance.DoubleList);
                    fixed (byte* pBatch = batch)
                    {
                        for (int i = 0; i < span.Length; i++)
                        {
                            if (256 - used < 9)
                            {
                                writer.WriteBytes(batch.Slice(0, used));
                                used = 0;
                            }
                            var value = span[i];
                            byte* dst = pBatch + used;
                            *dst = tag4; // Direct byte assignment
                            *(ulong*)(dst + 1) = *(ulong*)&value;
                            used += 9;
                        }
                    }
                    if (used > 0)
                    {
                        writer.WriteBytes(batch.Slice(0, used));
                    }
                }
            }
            if (instance.StringList != null)
            {
                for (int i = 0; i < instance.StringList.Count; i++)
                {
                    var item = instance.StringList[i];
                    if (item != null)
                    {
                        // Tag for field 5, Len
                        writer.WriteSingleByte(0x2A);
                        writer.WriteVarUInt32((uint)System.Text.Encoding.UTF8.GetByteCount(item));
                        writer.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
            if (instance.IntArray != null)
            {
                foreach (var item in instance.IntArray)
                {
                    // Tag for field 6, VarInt
                    writer.WriteSingleByte(0x30);
                    writer.WriteVarInt32(item);
                }
            }
            if (instance.FloatArray != null)
            {
                // Batched float serialization
                unsafe
                {
                    byte tag7 = 0x3D; // Single byte tag
                    System.Span<byte> batch = stackalloc byte[256];
                    int used = 0;
                    fixed (byte* pBatch = batch)
                    {
                        foreach (var value in instance.FloatArray)
                        {
                            if (256 - used < 5)
                            {
                                writer.WriteBytes(batch.Slice(0, used));
                                used = 0;
                            }
                            byte* dst = pBatch + used;
                            *dst = tag7; // Direct byte assignment
                            *(uint*)(dst + 1) = *(uint*)&value;
                            used += 5;
                        }
                    }
                    if (used > 0)
                    {
                        writer.WriteBytes(batch.Slice(0, used));
                    }
                }
            }
            if (instance.DoubleArray != null)
            {
                // Batched double serialization
                unsafe
                {
                    byte tag8 = 0x41; // Single byte tag
                    System.Span<byte> batch = stackalloc byte[256];
                    int used = 0;
                    fixed (byte* pBatch = batch)
                    {
                        foreach (var value in instance.DoubleArray)
                        {
                            if (256 - used < 9)
                            {
                                writer.WriteBytes(batch.Slice(0, used));
                                used = 0;
                            }
                            byte* dst = pBatch + used;
                            *dst = tag8; // Direct byte assignment
                            *(ulong*)(dst + 1) = *(ulong*)&value;
                            used += 9;
                        }
                    }
                    if (used > 0)
                    {
                        writer.WriteBytes(batch.Slice(0, used));
                    }
                }
            }
            if (instance.StringArray != null)
            {
                for (int i = 0; i < instance.StringArray.Length; i++)
                {
                    var item = instance.StringArray[i];
                    if (item != null)
                    {
                        // Tag for field 9, Len
                        writer.WriteSingleByte(0x4A);
                        writer.WriteVarUInt32((uint)System.Text.Encoding.UTF8.GetByteCount(item));
                        writer.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
            if (instance.PackedFixedIntList != null)
            {
                foreach (var item in instance.PackedFixedIntList)
                {
                    // Tag for field 10, Fixed32b
                    writer.WriteSingleByte(0x55);
                    writer.WriteFixedSizeInt32(item);
                }
            }
            if (instance.PackedZigZagIntList != null)
            {
                foreach (var item in instance.PackedZigZagIntList)
                {
                    // Tag for field 11, VarInt
                    writer.WriteSingleByte(0x58);
                    writer.WriteZigZag32(item);
                }
            }
        }

        public static void WritePrimitiveTypesModel(ref global::GProtobuf.Core.StreamWriter writer, global::GProtobuf.Benchmark.Models.PrimitiveTypesModel instance)
        {
            if (instance.IntValue != 0)
            {
                // Tag for field 1, VarInt
                writer.WriteSingleByte(0x08);
                writer.WriteVarInt32(instance.IntValue);
            }

            if (instance.LongValue != 0)
            {
                // Tag for field 2, VarInt
                writer.WriteSingleByte(0x10);
                writer.WriteInt64(instance.LongValue, false);
            }

            // Tag for field 3, Fixed32b
            writer.WriteSingleByte(0x1D);
            writer.WriteFloat(instance.FloatValue);

            // Tag for field 4, Fixed64b
            writer.WriteSingleByte(0x21);
            writer.WriteDouble(instance.DoubleValue);

            // Tag for field 5, VarInt
            writer.WriteSingleByte(0x28);
            writer.WriteBool(instance.BoolValue);

            if (instance.StringValue != null)
            {
                // Tag for field 6, Len
                writer.WriteSingleByte(0x32);
                writer.WriteVarUInt32((uint)Encoding.UTF8.GetByteCount(instance.StringValue));
                writer.WriteString(instance.StringValue);
            }

            if (instance.ByteArrayValue != null)
            {
                // Tag for field 7, Len
                writer.WriteSingleByte(0x3A);
                writer.WriteVarUInt32((uint)instance.ByteArrayValue.Length);
                writer.WriteBytes(instance.ByteArrayValue);
            }
            if (instance.FixedIntValue != 0)
            {
                // Tag for field 8, Fixed32b
                writer.WriteSingleByte(0x45);
                writer.WriteFixedSizeInt32(instance.FixedIntValue);
            }

            if (instance.FixedLongValue != 0)
            {
                // Tag for field 9, VarInt
                writer.WriteSingleByte(0x48);
                writer.WriteInt64(instance.FixedLongValue, false);
            }

            if (instance.ZigZagIntValue != 0)
            {
                // Tag for field 10, VarInt
                writer.WriteSingleByte(0x50);
                writer.WriteZigZag32(instance.ZigZagIntValue);
            }

            if (instance.ZigZagLongValue != 0)
            {
                // Tag for field 11, VarInt
                writer.WriteSingleByte(0x58);
                writer.WriteInt64(instance.ZigZagLongValue, true);
            }

        }

    }

    public static class SizeCalculators2
    {
        public static void CalculateNestedMessagesModelSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.NestedMessagesModel obj)
        {
            if (obj.StringField1 != null)
            {
                // Tag for field 100, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xA2, 0x06
                calculator.WriteString(obj.StringField1);
            }

            if (obj.StringField2 != null)
            {
                // Tag for field 101, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xAA, 0x06
                calculator.WriteString(obj.StringField2);
            }

            if (obj.StringField3 != null)
            {
                // Tag for field 102, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xB2, 0x06
                calculator.WriteString(obj.StringField3);
            }

            if (obj.StringField4 != null)
            {
                // Tag for field 103, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xBA, 0x06
                calculator.WriteString(obj.StringField4);
            }

            if (obj.StringField5 != null)
            {
                // Tag for field 104, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xC2, 0x06
                calculator.WriteString(obj.StringField5);
            }

            if (obj.Person != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                var lengthBefore1 = calculator.Length;
                SizeCalculators.CalculatePersonModelSize(ref calculator, obj.Person);
                var contentLength1 = calculator.Length - lengthBefore1;
                calculator.WriteVarUInt32((uint)contentLength1);
            }

            if (obj.People != null)
            {
                for (int i = 0; i < obj.People.Count; i++)
                {
                    var item = obj.People[i];
                    if (item != null)
                    {
                        // Tag for field 2, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculatePersonModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type PersonModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.Address != null)
            {
                // Tag for field 3, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x1A
                var lengthBefore3 = calculator.Length;
                SizeCalculators.CalculateAddressModelSize(ref calculator, obj.Address);
                var contentLength3 = calculator.Length - lengthBefore3;
                calculator.WriteVarUInt32((uint)contentLength3);
            }

            if (obj.Addresses != null)
            {
                for (int i = 0; i < obj.Addresses.Count; i++)
                {
                    var item = obj.Addresses[i];
                    if (item != null)
                    {
                        // Tag for field 4, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateAddressModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type AddressModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.Company != null)
            {
                // Tag for field 5, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                var lengthBefore5 = calculator.Length;
                SizeCalculators.CalculateCompanyModelSize(ref calculator, obj.Company);
                var contentLength5 = calculator.Length - lengthBefore5;
                calculator.WriteVarUInt32((uint)contentLength5);
            }

        }

        public static void CalculatePersonModelSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.PersonModel obj)
        {
            if (obj.FirstName != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                calculator.WriteString(obj.FirstName);
            }

            if (obj.LastName != null)
            {
                // Tag for field 2, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                calculator.WriteString(obj.LastName);
            }

            if (obj.Age != 0)
            {
                // Tag for field 3, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x18
                calculator.WriteVarInt32(obj.Age);
            }

            if (obj.Email != null)
            {
                // Tag for field 4, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                calculator.WriteString(obj.Email);
            }

            if (obj.Address != null)
            {
                // Tag for field 5, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                var lengthBefore5 = calculator.Length;
                SizeCalculators.CalculateAddressModelSize(ref calculator, obj.Address);
                var contentLength5 = calculator.Length - lengthBefore5;
                calculator.WriteVarUInt32((uint)contentLength5);
            }

            if (obj.PhoneNumbers != null)
            {
                for (int i = 0; i < obj.PhoneNumbers.Count; i++)
                {
                    var item = obj.PhoneNumbers[i];
                    if (item != null)
                    {
                        // Tag for field 6, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x32
                        calculator.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
        }

        public static void CalculateAddressModelSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.AddressModel obj)
        {
            if (obj.Street != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                calculator.WriteString(obj.Street);
            }

            if (obj.City != null)
            {
                // Tag for field 2, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                calculator.WriteString(obj.City);
            }

            if (obj.State != null)
            {
                // Tag for field 3, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x1A
                calculator.WriteString(obj.State);
            }

            if (obj.ZipCode != null)
            {
                // Tag for field 4, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                calculator.WriteString(obj.ZipCode);
            }

            if (obj.Country != null)
            {
                // Tag for field 5, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                calculator.WriteString(obj.Country);
            }

        }

        public static void CalculateCompanyModelSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.CompanyModel obj)
        {
            if (obj.Name != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                calculator.WriteString(obj.Name);
            }

            if (obj.HeadquartersAddress != null)
            {
                // Tag for field 2, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                var lengthBefore2 = calculator.Length;
                SizeCalculators.CalculateAddressModelSize(ref calculator, obj.HeadquartersAddress);
                var contentLength2 = calculator.Length - lengthBefore2;
                calculator.WriteVarUInt32((uint)contentLength2);
            }

            if (obj.Employees != null)
            {
                for (int i = 0; i < obj.Employees.Count; i++)
                {
                    var item = obj.Employees[i];
                    if (item != null)
                    {
                        // Tag for field 3, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x1A
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculatePersonModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type PersonModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.Offices != null)
            {
                for (int i = 0; i < obj.Offices.Count; i++)
                {
                    var item = obj.Offices[i];
                    if (item != null)
                    {
                        // Tag for field 4, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateAddressModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type AddressModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.FoundedYear != 0)
            {
                // Tag for field 5, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x28
                calculator.WriteVarInt32(obj.FoundedYear);
            }

        }

        public static void CalculateCollectionsModelSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.CollectionsModel obj)
        {
            if (obj.IntList != null)
            {
                for (int i = 0; i < obj.IntList.Count; i++)
                {
                    var item = obj.IntList[i];
                    // Tag for field 1, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x08
                    calculator.WriteVarInt32(item);
                }
            }
            if (obj.LongList != null)
            {
                for (int i = 0; i < obj.LongList.Count; i++)
                {
                    var item = obj.LongList[i];
                    // Tag for field 2, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x10
                    calculator.WriteVarInt64(item);
                }
            }
            if (obj.FloatList != null)
            {
                for (int i = 0; i < obj.FloatList.Count; i++)
                {
                    var item = obj.FloatList[i];
                    // Tag for field 3, Fixed32b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x1D
                    calculator.WriteFloat(item);
                }
            }
            if (obj.DoubleList != null)
            {
                for (int i = 0; i < obj.DoubleList.Count; i++)
                {
                    var item = obj.DoubleList[i];
                    // Tag for field 4, Fixed64b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x21
                    calculator.WriteDouble(item);
                }
            }
            if (obj.StringList != null)
            {
                for (int i = 0; i < obj.StringList.Count; i++)
                {
                    var item = obj.StringList[i];
                    if (item != null)
                    {
                        // Tag for field 5, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                        calculator.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.IntArray != null)
            {
                for (int i = 0; i < obj.IntArray.Length; i++)
                {
                    var item = obj.IntArray[i];
                    // Tag for field 6, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x30
                    calculator.WriteVarInt32(item);
                }
            }
            if (obj.FloatArray != null)
            {
                for (int i = 0; i < obj.FloatArray.Length; i++)
                {
                    var item = obj.FloatArray[i];
                    // Tag for field 7, Fixed32b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x3D
                    calculator.WriteFloat(item);
                }
            }
            if (obj.DoubleArray != null)
            {
                for (int i = 0; i < obj.DoubleArray.Length; i++)
                {
                    var item = obj.DoubleArray[i];
                    // Tag for field 8, Fixed64b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x41
                    calculator.WriteDouble(item);
                }
            }
            if (obj.StringArray != null)
            {
                for (int i = 0; i < obj.StringArray.Length; i++)
                {
                    var item = obj.StringArray[i];
                    if (item != null)
                    {
                        // Tag for field 9, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x4A
                        calculator.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.PackedFixedIntList != null)
            {
                for (int i = 0; i < obj.PackedFixedIntList.Count; i++)
                {
                    var item = obj.PackedFixedIntList[i];
                    // Tag for field 10, Fixed32b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x55
                    calculator.WriteFixedSizeInt32(item);
                }
            }
            if (obj.PackedZigZagIntList != null)
            {
                for (int i = 0; i < obj.PackedZigZagIntList.Count; i++)
                {
                    var item = obj.PackedZigZagIntList[i];
                    // Tag for field 11, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x58
                    calculator.WriteZigZag32(item);
                }
            }
        }

        public static void CalculatePrimitiveTypesModelSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.PrimitiveTypesModel obj)
        {
            if (obj.IntValue != 0)
            {
                // Tag for field 1, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x08
                calculator.WriteVarInt32(obj.IntValue);
            }

            if (obj.LongValue != 0)
            {
                // Tag for field 2, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x10
                calculator.WriteInt64(obj.LongValue, false);
            }

            // Tag for field 3, Fixed32b
            calculator.AddByteLength(1); // Precomputed tag bytes: 0x1D
            calculator.WriteFloat(obj.FloatValue);

            // Tag for field 4, Fixed64b
            calculator.AddByteLength(1); // Precomputed tag bytes: 0x21
            calculator.WriteDouble(obj.DoubleValue);

            // Tag for field 5, VarInt
            calculator.AddByteLength(1); // Precomputed tag bytes: 0x28
            calculator.WriteBool(obj.BoolValue);

            if (obj.StringValue != null)
            {
                // Tag for field 6, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x32
                calculator.WriteString(obj.StringValue);
            }

            if (obj.ByteArrayValue != null)
            {
                // Tag for field 7, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x3A
                calculator.WriteBytes(obj.ByteArrayValue);
            }
            if (obj.FixedIntValue != 0)
            {
                // Tag for field 8, Fixed32b
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x45
                calculator.WriteFixedSizeInt32(obj.FixedIntValue);
            }

            if (obj.FixedLongValue != 0)
            {
                // Tag for field 9, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x48
                calculator.WriteInt64(obj.FixedLongValue, false);
            }

            if (obj.ZigZagIntValue != 0)
            {
                // Tag for field 10, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x50
                calculator.WriteZigZag32(obj.ZigZagIntValue);
            }

            if (obj.ZigZagLongValue != 0)
            {
                // Tag for field 11, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x58
                calculator.WriteInt64(obj.ZigZagLongValue, true);
            }

        }


        public static void CalculateNestedMessagesModelContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.NestedMessagesModel obj)
        {
            if (obj.StringField1 != null)
            {
                // Tag for field 100, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xA2, 0x06
                calculator.WriteString(obj.StringField1);
            }

            if (obj.StringField2 != null)
            {
                // Tag for field 101, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xAA, 0x06
                calculator.WriteString(obj.StringField2);
            }

            if (obj.StringField3 != null)
            {
                // Tag for field 102, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xB2, 0x06
                calculator.WriteString(obj.StringField3);
            }

            if (obj.StringField4 != null)
            {
                // Tag for field 103, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xBA, 0x06
                calculator.WriteString(obj.StringField4);
            }

            if (obj.StringField5 != null)
            {
                // Tag for field 104, Len
                calculator.AddByteLength(2); // Precomputed tag bytes: 0xC2, 0x06
                calculator.WriteString(obj.StringField5);
            }

            if (obj.Person != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                var lengthBefore1 = calculator.Length;
                SizeCalculators.CalculatePersonModelSize(ref calculator, obj.Person);
                var contentLength1 = calculator.Length - lengthBefore1;
                calculator.WriteVarUInt32((uint)contentLength1);
            }

            if (obj.People != null)
            {
                for (int i = 0; i < obj.People.Count; i++)
                {
                    var item = obj.People[i];
                    if (item != null)
                    {
                        // Tag for field 2, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculatePersonModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type PersonModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.Address != null)
            {
                // Tag for field 3, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x1A
                var lengthBefore3 = calculator.Length;
                SizeCalculators.CalculateAddressModelSize(ref calculator, obj.Address);
                var contentLength3 = calculator.Length - lengthBefore3;
                calculator.WriteVarUInt32((uint)contentLength3);
            }

            if (obj.Addresses != null)
            {
                for (int i = 0; i < obj.Addresses.Count; i++)
                {
                    var item = obj.Addresses[i];
                    if (item != null)
                    {
                        // Tag for field 4, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateAddressModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type AddressModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.Company != null)
            {
                // Tag for field 5, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                var lengthBefore5 = calculator.Length;
                SizeCalculators.CalculateCompanyModelSize(ref calculator, obj.Company);
                var contentLength5 = calculator.Length - lengthBefore5;
                calculator.WriteVarUInt32((uint)contentLength5);
            }

        }

        public static void CalculatePersonModelContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.PersonModel obj)
        {
            if (obj.FirstName != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                calculator.WriteString(obj.FirstName);
            }

            if (obj.LastName != null)
            {
                // Tag for field 2, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                calculator.WriteString(obj.LastName);
            }

            if (obj.Age != 0)
            {
                // Tag for field 3, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x18
                calculator.WriteVarInt32(obj.Age);
            }

            if (obj.Email != null)
            {
                // Tag for field 4, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                calculator.WriteString(obj.Email);
            }

            if (obj.Address != null)
            {
                // Tag for field 5, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                var lengthBefore5 = calculator.Length;
                SizeCalculators.CalculateAddressModelSize(ref calculator, obj.Address);
                var contentLength5 = calculator.Length - lengthBefore5;
                calculator.WriteVarUInt32((uint)contentLength5);
            }

            if (obj.PhoneNumbers != null)
            {
                for (int i = 0; i < obj.PhoneNumbers.Count; i++)
                {
                    var item = obj.PhoneNumbers[i];
                    if (item != null)
                    {
                        // Tag for field 6, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x32
                        calculator.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
        }

        public static void CalculateAddressModelContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.AddressModel obj)
        {
            if (obj.Street != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                calculator.WriteString(obj.Street);
            }

            if (obj.City != null)
            {
                // Tag for field 2, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                calculator.WriteString(obj.City);
            }

            if (obj.State != null)
            {
                // Tag for field 3, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x1A
                calculator.WriteString(obj.State);
            }

            if (obj.ZipCode != null)
            {
                // Tag for field 4, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                calculator.WriteString(obj.ZipCode);
            }

            if (obj.Country != null)
            {
                // Tag for field 5, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                calculator.WriteString(obj.Country);
            }

        }

        public static void CalculateCompanyModelContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.CompanyModel obj)
        {
            if (obj.Name != null)
            {
                // Tag for field 1, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x0A
                calculator.WriteString(obj.Name);
            }

            if (obj.HeadquartersAddress != null)
            {
                // Tag for field 2, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x12
                var lengthBefore2 = calculator.Length;
                SizeCalculators.CalculateAddressModelSize(ref calculator, obj.HeadquartersAddress);
                var contentLength2 = calculator.Length - lengthBefore2;
                calculator.WriteVarUInt32((uint)contentLength2);
            }

            if (obj.Employees != null)
            {
                for (int i = 0; i < obj.Employees.Count; i++)
                {
                    var item = obj.Employees[i];
                    if (item != null)
                    {
                        // Tag for field 3, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x1A
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculatePersonModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type PersonModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.Offices != null)
            {
                for (int i = 0; i < obj.Offices.Count; i++)
                {
                    var item = obj.Offices[i];
                    if (item != null)
                    {
                        // Tag for field 4, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x22
                        var itemCalculator = new global::GProtobuf.Core.WriteSizeCalculator();
                        SizeCalculators.CalculateAddressModelSize(ref itemCalculator, item);
                        calculator.WriteVarUInt32((uint)itemCalculator.Length);
                        calculator.AddByteLength(itemCalculator.Length);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type AddressModel was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.FoundedYear != 0)
            {
                // Tag for field 5, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x28
                calculator.WriteVarInt32(obj.FoundedYear);
            }

        }

        public static void CalculateCollectionsModelContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.CollectionsModel obj)
        {
            if (obj.IntList != null)
            {
                for (int i = 0; i < obj.IntList.Count; i++)
                {
                    var item = obj.IntList[i];
                    // Tag for field 1, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x08
                    calculator.WriteVarInt32(item);
                }
            }
            if (obj.LongList != null)
            {
                for (int i = 0; i < obj.LongList.Count; i++)
                {
                    var item = obj.LongList[i];
                    // Tag for field 2, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x10
                    calculator.WriteVarInt64(item);
                }
            }
            if (obj.FloatList != null)
            {
                for (int i = 0; i < obj.FloatList.Count; i++)
                {
                    var item = obj.FloatList[i];
                    // Tag for field 3, Fixed32b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x1D
                    calculator.WriteFloat(item);
                }
            }
            if (obj.DoubleList != null)
            {
                for (int i = 0; i < obj.DoubleList.Count; i++)
                {
                    var item = obj.DoubleList[i];
                    // Tag for field 4, Fixed64b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x21
                    calculator.WriteDouble(item);
                }
            }
            if (obj.StringList != null)
            {
                for (int i = 0; i < obj.StringList.Count; i++)
                {
                    var item = obj.StringList[i];
                    if (item != null)
                    {
                        // Tag for field 5, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x2A
                        calculator.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.IntArray != null)
            {
                for (int i = 0; i < obj.IntArray.Length; i++)
                {
                    var item = obj.IntArray[i];
                    // Tag for field 6, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x30
                    calculator.WriteVarInt32(item);
                }
            }
            if (obj.FloatArray != null)
            {
                for (int i = 0; i < obj.FloatArray.Length; i++)
                {
                    var item = obj.FloatArray[i];
                    // Tag for field 7, Fixed32b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x3D
                    calculator.WriteFloat(item);
                }
            }
            if (obj.DoubleArray != null)
            {
                for (int i = 0; i < obj.DoubleArray.Length; i++)
                {
                    var item = obj.DoubleArray[i];
                    // Tag for field 8, Fixed64b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x41
                    calculator.WriteDouble(item);
                }
            }
            if (obj.StringArray != null)
            {
                for (int i = 0; i < obj.StringArray.Length; i++)
                {
                    var item = obj.StringArray[i];
                    if (item != null)
                    {
                        // Tag for field 9, Len
                        calculator.AddByteLength(1); // Precomputed tag bytes: 0x4A
                        calculator.WriteString(item);
                    }
                    else
                    {
                        throw new System.InvalidOperationException("An element of type string was null; this might be as contents in a list/array");
                    }
                }
            }
            if (obj.PackedFixedIntList != null)
            {
                for (int i = 0; i < obj.PackedFixedIntList.Count; i++)
                {
                    var item = obj.PackedFixedIntList[i];
                    // Tag for field 10, Fixed32b
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x55
                    calculator.WriteFixedSizeInt32(item);
                }
            }
            if (obj.PackedZigZagIntList != null)
            {
                for (int i = 0; i < obj.PackedZigZagIntList.Count; i++)
                {
                    var item = obj.PackedZigZagIntList[i];
                    // Tag for field 11, VarInt
                    calculator.AddByteLength(1); // Precomputed tag bytes: 0x58
                    calculator.WriteZigZag32(item);
                }
            }
        }

        public static void CalculatePrimitiveTypesModelContentSize(ref global::GProtobuf.Core.WriteSizeCalculator calculator, global::GProtobuf.Benchmark.Models.PrimitiveTypesModel obj)
        {
            if (obj.IntValue != 0)
            {
                // Tag for field 1, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x08
                calculator.WriteVarInt32(obj.IntValue);
            }

            if (obj.LongValue != 0)
            {
                // Tag for field 2, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x10
                calculator.WriteInt64(obj.LongValue, false);
            }

            // Tag for field 3, Fixed32b
            calculator.AddByteLength(1); // Precomputed tag bytes: 0x1D
            calculator.WriteFloat(obj.FloatValue);

            // Tag for field 4, Fixed64b
            calculator.AddByteLength(1); // Precomputed tag bytes: 0x21
            calculator.WriteDouble(obj.DoubleValue);

            // Tag for field 5, VarInt
            calculator.AddByteLength(1); // Precomputed tag bytes: 0x28
            calculator.WriteBool(obj.BoolValue);

            if (obj.StringValue != null)
            {
                // Tag for field 6, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x32
                calculator.WriteString(obj.StringValue);
            }

            if (obj.ByteArrayValue != null)
            {
                // Tag for field 7, Len
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x3A
                calculator.WriteBytes(obj.ByteArrayValue);
            }
            if (obj.FixedIntValue != 0)
            {
                // Tag for field 8, Fixed32b
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x45
                calculator.WriteFixedSizeInt32(obj.FixedIntValue);
            }

            if (obj.FixedLongValue != 0)
            {
                // Tag for field 9, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x48
                calculator.WriteInt64(obj.FixedLongValue, false);
            }

            if (obj.ZigZagIntValue != 0)
            {
                // Tag for field 10, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x50
                calculator.WriteZigZag32(obj.ZigZagIntValue);
            }

            if (obj.ZigZagLongValue != 0)
            {
                // Tag for field 11, VarInt
                calculator.AddByteLength(1); // Precomputed tag bytes: 0x58
                calculator.WriteInt64(obj.ZigZagLongValue, true);
            }

        }

    }
}
